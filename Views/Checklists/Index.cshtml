@model ChiengPlannerVue.Models.Checklists.ChecklistViewModel;
@{
    ViewData["Title"] = "Checklists";
}
<style>
    .page-size {
        width: 90%;
        height: 100%;
        padding-left: 2%;
    }

    .center-section {
        left: 50%;
        position: absolute;
        top: 15%;
    }

    .add-checklist-button {
        width: 100px;
        height: 100px;
        border-radius: 10px;
        font-size: x-large;
        background: #7a0696;
        color: white;
        border-color: #7a0696;
        border: 1px;
    }

        .add-checklist-button:hover {
            background: #490470;
            border-color: #490470;
        }

    .checklist-tabs {
        position: absolute;
        border-bottom: 1px solid rgb(122, 6, 150, 0.5);
        top: 30%;
        width: 50%;
        z-index: 10 !important;
    }

    .checklist-tab-list {
        list-style-type: none;
        padding: 10px;
    }

    .checklist-tab-section {
        float: left;
        padding-left: 2%;
        padding-right: 2%;
        padding-top: 1%;
        position: relative;
        margin-left: -10px;
        margin-right: 10px;
    }

    .ct-list-selected {
        border: 1px solid;
        border-color: rgb(122, 6, 150, 0.5);
        border-bottom: 0px;
    }

    .checklist-tab-button {
        border: none;
        font-size: 30px;
        color: #7a0696;
        width: 100%;
        height: 100%;
    }

        .checklist-tab-button :hover {
            color: rgb(122, 6, 150, 0.5);
            background-color: lightgray;
        }

    .checklist-tab-bottom-line {
        position: absolute;
        top: 36.1%;
        border: 1px solid #7a0696;
        left: .7%;
        width: 40%;
        opacity: .5;
    }

    .display-checklists {
        position: absolute;
        top: 35%;
        width: 90%;
        margin: 60px;
    }

    .no-checklists {
        font-style: italic;
        font-size: 30px;
        opacity: .5;
    }

    .save-checklist-button {
        border-radius: 5px;
        font-size: 12px;
        background: #7a0696;
        color: white;
        border-color: #7a0696;
        border: 1px;
        padding: 5px;
        width: 50px;
    }

        .save-checklist-button:hover {
            background: #490470;
            border-color: #490470;
        }

    .save-checklist-button-inactive {
        border-radius: 5px;
        font-size: 12px;
        background: gray;
        color: white;
        border-color: gray;
        border: 1px;
        padding: 5px;
        width: 50px;
    }

    .add-task-button {
        float: right;
        color: white;
        border-radius: 5px;
        font-size: 12px;
        background: #7a0696;
        border-color: #7a0696;
        padding: 3px;
        width: 50px;
    }

        .add-task-button:hover {
            background: #490470;
            border-color: #490470;
        }

    .add-task-button-inactive {
        float: right;
        border-radius: 5px;
        font-size: 12px;
        background: gray;
        color: white;
        border-color: gray;
        border: 1px;
        padding: 5px;
        width: 50px;
    }

    .save-task {
        color: green;
        background: none;
        border: none;
        border: none;
        margin-left: 20%;
        border-radius: 5px;
    }

        .save-task:hover {
            background: gray;
        }

    .save-task-inactive {
        color: grey;
        background: none;
        border: none;
        border: none;
        margin-left: 20%;
        border-radius: 5px;
        padding: 5%;
    }

    .edit-task {
        color: green;
        background: none;
        border: none;
        margin-left: 20%;
        border-radius: 5px;
    }

        .edit-task:hover {
            background: gray;
        }

    .edit-task-inactive {
        color: grey;
        background: none;
        border: none;
        margin-left: 20%;
        border-radius: 5px;
        padding: 5%;
    }

    .delete-task {
        color: red;
        background: none;
        border: none;
        border-radius: 5px;
        margin-left: 10%;
    }

        .delete-task:hover {
            background: gray;
        }

    .task-checkbox {
        margin-right: 1% !important;
        border: solid 1px;
        border-color: lightgrey;
        margin-bottom: 1%;
    }

    .task-input {
        border-radius: 5px;
        border: solid 1px;
        border-color: lightgrey;
        width: 80%;
    }

    .save-delete-task-buttons {
        float: right;
        margin-right: 1%;
        width: 30%;
        margin-top: 3.5%;
        margin-bottom: 4%;
    }

    .task {
        margin-bottom: 2%;
        display: inline-flex;
        width: 100%;
        justify-content: space-between;
    }

    .task-border-bottom {
        border-bottom: solid 1px lightgrey;
    }

    .task-text {
        width: 80%;
        padding: 1%;
        margin-top: 2.5%;
        margin-bottom: 4%;
    }

    .checked-task {
        text-decoration-line: line-through;
        text-decoration-color: gray;
        color: gray;
        text-decoration-thickness: 1.5px;
        margin-top: 3.5% !important;
        margin-bottom: 3% !important;
    }

    .completed-badge {
        background-color: green;
        color: white;
        padding: 4px 8px;
        text-align: center;
        border-radius: 5px;
    }


    .error-modal.in {
        opacity: 1;
    }

    .success-modal.in {
        opacity: 1;
    }

    .checklist-card {
        margin: 2%;
        width: 375px;
        border: solid 1px;
        overflow-y: auto;
    }



    .checklist-row {
        padding: 5%;
        display: inline-flex;
        width: 100%;
        height: 500px;
        justify-content: center;
        margin-top: -7%;
        margin-bottom: -4%;
    }

    .task-checkbox-card {
        margin-right: 1% !important;
        border: solid 1px;
        border-color: lightgrey;
        margin-bottom: -1%;
        margin-left: 8%;
    }

    .task-text-card {
        width: 80%;
        padding: 1%;
        margin-top: 5%;
    }

    /* width */

    .display-card-scrollbar::-webkit-scrollbar {
        width: 10px;
    }



    /* Track */

    .display-card-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        -webkit-border-radius: 10px;
        border-radius: 10px;
    }



    /* Handle */

    .display-card-scrollbar::-webkit-scrollbar-thumb {
        background: #7a0696;
        -webkit-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: inset 0 0 6px;
    }



        /* Handle on hover */

        .display-card-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #490470;
        }

    .show-more-button {
        color: white;
        border-radius: 5px;
        font-size: 20px;
        background: #7a0696;
        border-color: #7a0696;
        padding: 3px;
        width: 300px;
        height: 50px;
    }

        .show-more-button:hover {
            background: #490470;
            border-color: #490470;
        }


    .text-card-title {
        margin-top: 10%;
        margin-left: 5%;
        margin-bottom: -10%;
        display: inline-flex;
    }

    .chieng-modal-close {
        float: right;
    }

    .completed-tag-modal {
        color: white;
        background-color: green;
        padding: .5rem;
        font-size: .75rem;
        margin-right: 1rem;
    }

    .completed-tag-card {
        color: white;
        background-color: green;
        padding: .5rem;
        font-size: .50rem;
        margin-left: 1rem;
        margin-bottom: .75rem;
    }

</style>
<div id="errorModal" class="error-modal modal" data-bs-backdrop="false" role="dialog">
    <div class="modal-dialog modal-sm mt-3">
        <div class="modal-content bg-danger">
            <div class="modal-body text-white">
                <div style="float: right;">
                    <button type="button" id="errorClose" class="close" aria-label="Close" style="color: white;border: none;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <p id="errorMsg" class="d-inline"></p>
            </div>

        </div>
    </div>
</div>
<div id="AddOrEditModal" class="modal" data-bs-backdrop="static" role="dialog">
    <div class="modal-dialog modal-lg" style="width: 60%;">
        <div class="modal-content">
            <div class="modal-body">
                <div class="chieng-modal-close">
                    <button type="button" id="addOrEditClose" class="close" aria-label="Close" style="border: none;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div id="AddOrEditChecklist" style="margin-bottom: -10%;">
                </div>
                <div id="ChecklistTaskDivider" style="margin-top: 12%;margin-bottom: -10%;display: none;">
                    <hr style="margin: 5%; border-color: black;" />
                    <br />
                </div>
                <div id="Tasks" style="display: none;"></div>
            </div>

        </div>
    </div>
</div>
<div id="successModal" class="success-modal modal" data-bs-backdrop="false" role="dialog">
    <div class="modal-dialog modal-sm mt-3">
        <div class="modal-content bg-success">
            <div class="modal-body text-white">
                <div style="float: right;">
                    <button type="button" id="successClose" class="close" aria-label="Close" style="color: white;border: none;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <p id="successMsg" class="d-inline"></p>
            </div>
        </div>
    </div>
</div>
<div id="deleteWarningModal" class="modal" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content bg-warning">
            <div class="modal-body text-white">
                <p class="d-inline"><b><small>Are you sure you want to delete this Checklist? You won't be able to recover it.</small></b></p>
            </div>
            <div class="modal-footer" style="border-top: 0px;margin-top: -25px;">
                <button type="button" id="continueDelete" class="btn btn-danger">Ok</button>
                <button type="button" id="cancelDelete" class="btn btn-success">Cancel</button>
            </div>
        </div>
    </div>
</div>


<div class="page-size">

    <div class="center-section">
        <button class="add-checklist-button" id="AddChecklist">+</button>
    </div>

    <div class="checklist-tabs">
        @if (Model.Active)
        {
            <ul class="checklist-tab-list">
                <li id="ActiveChecklists" class="checklist-tab-section ct-list-selected">
                    <button class="checklist-tab-button"><b>Active</b></button>
                </li>

                <li id="CompletedChecklists" class="checklist-tab-section">
                    <button class="checklist-tab-button"><b>Completed</b></button>
                </li>
            </ul>
        }
        else
        {
            <ul class="checklist-tab-list">
                <li id="ActiveChecklists" class="checklist-tab-section">
                    <button class="checklist-tab-button"><b>Active</b></button>
                </li>

                <li id="CompletedChecklists" class="checklist-tab-section ct-list-selected">
                    <button class="checklist-tab-button"><b>Completed</b></button>
                </li>
            </ul>
        }

    </div>
    @*<hr class="checklist-tab-bottom-line" />*@
    <div id="DisplayChecklists" class="display-checklists">
        <partial name="_DisplayChecklist" model="Model" />
    </div>
</div>
@*<div id="DisplayChecklists">
    <partial name="_AddOrEditChecklist" model="Model" />*
</div>*@

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            // If Task names are too long truncate task names to fit within the width of the checklist card
            var checklistCardTasks = $('.task-text-card')
            TruncateTasks(checklistCardTasks);

            $('#AddChecklist').on('click', function () {
                AddOrEditChecklist(0)
                $('#AddOrEditModal').modal('show');
            })

            // Determines if ChecklistName 'input' field has been modified, default to false.
            var checklistNameModified = false;

            // Determines if Task being actively modified has been changed at all, default to false.
            var taskNameModified = false;

            // Task counter for 'AddOrEditChecklist' modal TO-DO: Task counter is useless, tasks will be numbered with the Id they are stored in the db with once those functions are wired up.
            var taskCounter = 1;

            // Offset for Checklist "Show More" button
            var offset = @Model.PageLimit;

            // Determines if there has been any data modifications that require a reload
            var reloadChecklists = false;

            var completedChecklist = false;

            var deleteChecklistId = 0;

            $('#ActiveChecklists').on('click', function () {
                if ($(this).hasClass("ct-list-selected")) {
                }
                else {
                    $(this).addClass("ct-list-selected");
                    $("#CompletedChecklists").removeClass("ct-list-selected");
                    var completed = false;
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("DisplayChecklists", "Checklists")",
                        data: { completed: completed },
                        success: function (data) {
                            $('#DisplayChecklists').html(data)
                            offset = @Model.PageLimit;
                            var checklistCardTasks = $('.task-text-card')
                            TruncateTasks(checklistCardTasks);
                        },
                        error: function () {
                            $("#errorModal").css({ 'transition': 'opacity 3s' });
                            $('#errorMsg').html('<b><small>There was an error retrieving your checklists, please try again</small></b>');
                            $('#errorModal').modal('show');
                        }
                    })
                }
            })
            $('#CompletedChecklists').on('click', function () {
                if ($(this).hasClass("ct-list-selected")) {
                }
                else {
                    $(this).addClass("ct-list-selected");
                    $("#ActiveChecklists").removeClass("ct-list-selected");
                    var completed = true;
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("DisplayChecklists", "Checklists")",
                        data: { completed: completed },
                        success: function (data) {
                            $('#DisplayChecklists').html(data)
                            offset = @Model.PageLimit;
                            var checklistCardTasks = $('.task-text-card')
                            TruncateTasks(checklistCardTasks);
                        },
                        error: function () {
                            $("#errorModal").css({ 'transition': 'opacity 3s' });
                            $('#errorMsg').html('<b><small>There was an error retrieving your checklists, please try again</small></b>');
                            $('#errorModal').modal('show');
                        }
                    })
                }
            })
            $('#DisplayChecklists').on('click', '#ShowMore', function () {
                var completed = false;
                if ($('#CompletedChecklists').hasClass("ct-list-selected")) {
                    completed = true;
                }
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("DisplayChecklists", "Checklists")",
                    data: { completed: completed, offset: offset },
                    success: function (data) {
                        $('#ShowMore').parent().replaceWith(data)
                        offset = offset + @Model.PageLimit;
                        var checklistCardTasks = $('.task-text-card')
                        TruncateTasks(checklistCardTasks);
                    },
                    error: function () {
                        $("#errorModal").css({ 'transition': 'opacity 3s' });
                        $('#errorMsg').html('<b><small>There was an error retrieving your checklists, please try again</small></b>');
                        $('#errorModal').modal('show');
                    }
                })
            })
            $('#DisplayChecklists').on('click', '.edit-checklist', function () {
                var id = $(this).attr("data-id")
                var taskTextTitle = $(this).parent().siblings('.text-card-title');
                Completed(id, taskTextTitle, true)
                AddOrEditChecklist(id)
                Tasks(id)
                // Show Tasks display
                if ($('#ChecklistTaskDivider').is(':hidden') && ($('#Tasks').is(':hidden') || $('#Tasks').html() == "")) {
                    $('#ChecklistTaskDivider').css("display", "block")
                    $('#Tasks').css("display", "block")
                }
                $('#AddOrEditModal').modal('show');
            })

            $('#DisplayChecklists').on('click', '.remove-checklist', function () {
                deleteChecklistId = $(this).attr("data-id")
                $('#deleteWarningModal').modal('show');
            })

            $('#continueDelete').on('click', function () {
                DeleteChecklist(deleteChecklistId)
            })

            $('#cancelDelete').on('click', function () {
                $('#deleteWarningModal').modal('hide');
            })


            $('#errorClose').on('click', function () {
                $('#errorModal').css({ 'transition': '' })
                $('#errorModal').fadeOut('slow');
                setTimeout(function () {
                    $("#errorModal").modal('hide');
                }, 500);
            });
            $('#successClose').on('click', function () {
                $('#successModal').css({ 'transition': '' })
                $('#successModal').fadeOut('slow');
                setTimeout(function () {
                    $("#successModal").modal('hide');
                }, 500);
            });
            $('#successModal').on('shown.bs.modal', function (e) {
                setTimeout(function () {
                    $('#successModal').css({ 'transition': '' })
                    $('#successModal').fadeOut('slow');
                    setTimeout(function () {
                        $("#successModal").modal('hide');
                    }, 500);
                }, 5000);
            });
            $('#addOrEditClose').on('click', function () {
                $(document.activeElement).trigger('blur')
                $('#AddOrEditModal').css({ 'transition': '' })
                $('#AddOrEditModal').fadeOut('slow');
                setTimeout(function () {
                    $("#AddOrEditModal").modal('hide');
                }, 500);
            });
            $('#AddOrEditModal').on('hidden.bs.modal', function () {
                $('#AddOrEditChecklist').html("");
                $('#Tasks').html("");
                $('#ChecklistTaskDivider').hide();
                checklistNameModified = false;
                taskNameModified = false;
                taskCounter = 1;

                if (reloadChecklists) {
                    var completed = false;
                    if ($('#CompletedChecklists').hasClass("ct-list-selected") || completedChecklist) {
                        completed = true;
                        if (!$('#CompletedChecklists').hasClass("ct-list-selected")) {
                            $("#CompletedChecklists").addClass("ct-list-selected");
                        }
                        $("#ActiveChecklists").removeClass("ct-list-selected");
                    }
                    else {
                        if (!$("#ActiveChecklists").hasClass("ct-list-selected")) {
                            $("#ActiveChecklists").addClass("ct-list-selected");
                        }
                        $("#CompletedChecklists").removeClass("ct-list-selected");
                    }
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("DisplayChecklists", "Checklists")",
                        data: { completed: completed },
                        success: function (data) {
                            $('#DisplayChecklists').html(data)
                            offset = @Model.PageLimit;
                            var checklistCardTasks = $('.task-text-card')
                            TruncateTasks(checklistCardTasks);
                        },
                        error: function () {
                            $("#errorModal").css({ 'transition': 'opacity 3s' });
                            $('#errorMsg').html('<b><small>There was an error retrieving your checklists, please try again</small></b>');
                            $('#errorModal').modal('show');
                        }
                    })
                    reloadChecklists = false;
                }
            })

            // If ChecklistName has been modified, activate the SaveChecklist button.
            $('#AddOrEditChecklist').on('input', '#ChecklistName', function () {
                if (!checklistNameModified) {
                    checklistNameModified = true;
                    $('#SaveChecklist').addClass('save-checklist-button')
                    $('#SaveChecklist').removeClass('save-checklist-button-inactive')
                }
                else {
                    // If the ChecklistName is now empty, do not allow User to save this.
                    if ($('#ChecklistName').val() == "") {
                        checklistNameModified = false;
                        $('#SaveChecklist').removeClass('save-checklist-button')
                        $('#SaveChecklist').addClass('save-checklist-button-inactive')
                    }
                }
            })

            // Save Checklist to DB and show Tasks if Checklist was just added
            $('#AddOrEditChecklist').on('click', '#SaveChecklist', function () {
                var name = $('#ChecklistName').val()
                // If button is not inactive, behave as intended
                if (!$(this).hasClass('save-checklist-button-inactive')) {

                    var id = $('#ChecklistId').val()
                    // AJAX function for saving Checklist
                    SaveChecklist(id, name, $(this));
                    checklistNameModified = false;
                    reloadChecklists = true;
                }
                else {
                    // TO DO: Pop error modal telling user to modify the Checklist Name before trying to save
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    if ($(this).html() != 'Save' || name == "") {
                        $('#errorMsg').html('<b><small>Need to have a Checklist Name in order to save</small></b>');
                    }
                    else {
                        $('#errorMsg').html('<b><small>Must update Checklist Name to save!</small></b>');
                    }
                    $('#errorModal').modal('show');
                }


            })

            $('#Tasks').on('click', '#AddTask', function () {
                // If button is not inactive, behave as intended
                if (!$(this).hasClass('add-task-button-inactive')) {
                    // If button is active, add Task input to TaskListItems
                    var task = '<li class="task">' +
                        '<input type="checkbox" class="task-checkbox" hidden />' +
                        '<input type="text" class="task-input"  />' +
                        '<div class="save-delete-task-buttons">' +
                        '<button class="save-task-inactive"><i class="fa-solid fa-check"></i></button>' +
                        '<button class="delete-task"><i class="fa-solid fa-trash-can"></i></button>' +
                        '</div>' +
                        '</li>';
                    $('#TaskListItems').append(task)
                    $('#successMsg').html('Task has been created!')
                    // Disable Add Task Button and all Edit Buttons until task input is completed
                    $(this).addClass('add-task-button-inactive')
                    $(this).removeClass('add-task-button')
                    DisableEditButton($('.edit-task'))
                }
                else {
                    // TO DO: Pop error modal telling user to complete current Task input in order to add new Task
                }
            })

            $('#Tasks').on('input', 'input[type=text]', function () {
                if (!taskNameModified) {
                    taskNameModified = true;
                    var saveDeleteDiv = $(this).siblings('div.save-delete-task-buttons');
                    var saveTask = saveDeleteDiv.children('.save-task-inactive');
                    saveTask.addClass('save-task');
                    saveTask.removeClass('save-task-inactive');
                }
                else {
                    // If the ChecklistName is now empty, do not allow User to save this.
                    if ($(this).val() == "") {
                        taskNameModified = false;
                        var saveDeleteDiv = $(this).siblings('div.save-delete-task-buttons');
                        var saveTask = saveDeleteDiv.children('.save-task');
                        saveTask.removeClass('save-task')
                        saveTask.addClass('save-task-inactive')
                    }
                }
            })

            $('#Tasks').on('click', '.save-task', function () {
                // Grab text input sibling node
                var taskInput = $(this).parent().siblings("input[type=text]");
                var taskCheckbox = $(this).parent().siblings("input[type=checkbox]");
                var list = $(this).parent().parent();
                var taskName = taskInput.val();
                var editButtonHtml = '<i class="fa-solid fa-edit"></i>';
                var taskTextTitle = taskInput.parent().parent().parent().parent().parent().siblings('.chieng-modal-close');
                // Save Task to DB and make dynamic changes if Task creation/modification succeeds
                SaveTasks($(taskInput).attr("data-id"), $(taskInput).val(), $(taskInput), $(this), $(taskCheckbox), list, editButtonHtml, taskTextTitle)
                taskNameModified = false;
                reloadChecklists = true;
            })

            $('#Tasks').on('click', '.edit-task', function () {
                // Grab <p> tag and checkbox sibling nodes
                var pTag = $(this).parent().siblings(".task-text");
                var taskId = $(pTag).attr('id')
                var pTagText = $(pTag).html();
                var taskCheckbox = $(this).parent().siblings("input[type=checkbox]");
                var list = $(this).parent().parent();
                // Write out input with the correct value added
                var taskInput = '<input type="text" id="TaskName' + taskCounter + '" class="task-input" value="' + pTagText + '" data-id="' + taskId + '" />'
                // Replace Task Input with <p> tag containing the Name of the Task
                $(pTag).replaceWith(taskInput)
                $(taskInput).focus()
                $(taskCheckbox).attr("hidden", "true")
                $(list).removeClass('task-border-bottom')
                taskNameModified = false;
                // Replace Edit with Checkmark button
                var saveButtonHtml = '<i class="fa-solid fa-check"></i>'
                $(this).addClass('save-task')
                $(this).removeClass('edit-task')
                $(this).html(saveButtonHtml)
                // Disable Add Task and Edit buttons until task modification is completed
                $('#AddTask').removeClass('add-task-button')
                $('#AddTask').addClass('add-task-button-inactive')
                DisableEditButton($('.edit-task'))
                $('#successMsg').html('Task has been edited!')
            })

            $('#Tasks').on('click', '.delete-task', function () {
                // Grab list node to which the clicked button belongs to.
                var list = $(this).parent().parent();
                var taskInput = $(this).parent().siblings("input[type=text]");
                if (taskInput.length == 0){
                    taskInput = $(this).parent().siblings("input[type=checkbox]");
                }
                DeleteTasks($(taskInput).attr("data-id"), list)
                taskNameModified = false;
            })

            $('#Tasks').on('click', 'input[type=checkbox]', function () {
                if ($(this).prop('checked')) {
                    var taskText = $(this).siblings('p');
                    var taskButton = $(this).siblings('div').children('.edit-task');
                    var taskTextTitle = taskText.parent().parent().parent().parent().parent().siblings('.chieng-modal-close');
                    // TO DO: Ajax function to mark task as complete.
                    MarkTasks($(taskText).attr('id'), taskText, taskButton, taskTextTitle, true, true)
                    // Within Ajax func, add "Completed" badge ".completed-badge" to modal if all tasks are completed
                    reloadChecklists = true;
                }
                else {
                    var taskText = $(this).siblings('p');
                    var taskButton = $(this).siblings('div').children('.edit-task-inactive');
                    var taskTextTitle = taskText.parent().parent().parent().parent().parent().siblings('.chieng-modal-close');
                    // TO DO: Ajax function to mark task as complete.
                    MarkTasks($(taskText).attr('id'), taskText, taskButton, taskTextTitle, false, true)
                    // Within Ajax func, remove "Completed" badge ".completed-badge" from modal if checklist was previously completed.
                    reloadChecklists = true;
                }
            })

            $('#DisplayChecklists').on('click', 'input[type=checkbox]', function () {
                if ($(this).prop('checked')) {
                    var taskText = $(this).siblings('p');
                    var taskTextTitle = taskText.parent().parent().parent().siblings('.text-card-title');
                    // TO DO: Ajax function to mark task as complete.
                    MarkTasks($(taskText).attr('id'), taskText, null, taskTextTitle, true, false)
                    // Within Ajax func, add "Completed" badge ".completed-badge" to modal if all tasks are completed
                }
                else {
                    var taskText = $(this).siblings('p');
                    var taskTextTitle = taskText.parent().parent().parent().siblings('.text-card-title');
                    // TO DO: Ajax function to mark task as complete.
                    MarkTasks($(taskText).attr('id'), taskText, null, taskTextTitle, false, false)
                    // Within Ajax func, remove "Completed" badge ".completed-badge" from modal if checklist was previously completed.
                }
            })

            $('#errorClose').on('click', function () {
                $('#errorModal').css({ 'transition': '' })
                $('#errorModal').fadeOut('slow');
                setTimeout(function () {
                    $("#errorModal").modal('hide');
                }, 500);
            });

            $('#errorModal').on('shown.bs.modal', function (e) {
                setTimeout(function () {
                    $('#errorModal').css({ 'transition': '' })
                    $('#errorModal').fadeOut('slow');
                    setTimeout(function () {
                        $("#errorModal").modal('hide');
                    }, 500);
                }, 5000);
            });
        })

        function AddOrEditChecklist(id) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("AddOrEditChecklist", "Checklists")",
                data: { id: id },
                success: function (data) {
                    $('#AddOrEditChecklist').html(data)
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    if (typeof id !== 'undefined') {
                        $('#errorMsg').html('<b><small>There was an error creating your new Checklist, please try again</small></b>');
                    }
                    else {
                        $('#errorMsg').html('<b><small>There was an error displaying your Checklist, please try again</small></b>');
                    }
                    $('#errorModal').modal('show');
                }
            })
        }
        function SaveChecklist(id, name, button) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveChecklist", "Checklists")",
                data: { name: name, id: id },
                success: function (data) {
                    if (id == 0) {
                        Tasks(data.id)
                        $('#ChecklistId').val(data.id)

                        // After saving ChecklistName, change 'Create' button to 'Save' if not already done -- BEGIN
                        if (button.html() != 'Save') {
                            button.html('Save')
                            $('#successMsg').html('<b><small>Checklist has been created!</small></b>');
                        }
                        else {
                            $('#successMsg').html('<b><small>Checklist has been saved!</small></b>');
                        }

                        // Show Tasks display
                        if ($('#ChecklistTaskDivider').is(':hidden') && ($('#Tasks').is(':hidden') || $('#Tasks').html() == "")) {
                            $('#ChecklistTaskDivider').css("display", "block")
                            $('#Tasks').css("display", "block")
                        }
                    }
                    else {
                        $('#successMsg').html('<b><small>Checklist has been saved!</small></b>');
                    }

                    // Reset SaveChecklist button to inactive because Checklist name has been saved and there have been no further modifications
                    button.removeClass('save-checklist-button')
                    button.addClass('save-checklist-button-inactive')

                    $("#successModal").css({ 'transition': 'opacity 3s' });
                    $('#successModal').modal('show');
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    $('#errorMsg').html('<b><small>There was an error creating your Checklist, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function DeleteChecklist(id) {
            $('#deleteWarningModal').modal('hide');
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteChecklist", "Checklists")",
                data: { checklistId: id },
                success: function (data) {
                    if (data.success){
                        var completed = false;
                        if ($('#CompletedChecklists').hasClass("ct-list-selected")) {
                            completed = true;
                        }
                        var msg = data.message
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("DisplayChecklists", "Checklists")",
                            data: { completed: completed },
                            success: function (data) {
                                $('#DisplayChecklists').html(data)
                                offset = @Model.PageLimit;
                                var checklistCardTasks = $('.task-text-card')
                                TruncateTasks(checklistCardTasks);
                                $("#errorModal").css({ 'transition': 'opacity 3s' });
                                $('#errorMsg').html(msg);
                                $('#errorModal').modal('show');
                            },
                            error: function () {
                                $("#errorModal").css({ 'transition': 'opacity 3s' });
                                $('#errorMsg').html('<b><small>There was an error retrieving your checklists, please try again</small></b>');
                                $('#errorModal').modal('show');
                            }
                        })
                    }
                    else {
                        $("#errorModal").css({ 'transition': 'opacity 3s' });
                        $('#errorMsg').html(data.message);
                        $('#errorModal').modal('show');
                    }
                    
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    $('#errorMsg').html('<b><small>There was an error deleting your Checklist, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function Tasks(id) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("Tasks", "Checklists")",
                data: { id: id },
                success: function (data) {
                    $('#Tasks').html(data)
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    if (typeof id !== 'undefined') {
                        $('#errorMsg').html('<b><small>There was an error retreiving your Tasks, please try again/small></b>');
                    }
                    else {
                        $('#errorMsg').html('<b><small>There was an error displaying your Tasks, please try again</small></b>');
                    }
                    $('#errorModal').modal('show');
                }
            })
        }

        function SaveTasks(id, name, input, button, checkbox, list, edit, textTitle) {
            var checklistId = $('#ChecklistId').val()
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveTask", "Checklists")",
                data: { name: name, id: id, checklistId: checklistId },
                success: function (data) {
                    var taskText = '<p class="task-text" id="' + data.taskId + '">' + name + '</p>';
                    // Replace Task Input with <p> tag containing the Name of the Task
                    input.replaceWith(taskText)

                    checkbox.attr('hidden', false)
                    $(list).addClass('task-border-bottom')
                    // Replace Checkmark with Edit button
                    button.removeClass('save-task')
                    button.addClass('edit-task')
                    button.html(edit)
                    // Enable Add Task and Edit buttons
                    $('#AddTask').removeClass('add-task-button-inactive')
                    $('#AddTask').addClass('add-task-button')
                    EnableEditButton($('.edit-task-inactive'))
                    $(textTitle).children().remove('.completed-tag-modal')

                    $("#successModal").css({ 'transition': 'opacity 3s' });
                    $('#successModal').modal('show');
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    $('#errorMsg').html('<b><small>There was an error creating your Task, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function MarkTasks(id, text, button, textTitle, check, modal) {
            var checklistId = $('#ChecklistId').val()
            $.ajax({
                type: "POST",
                url: "@Url.Action("MarkTask", "Checklists")",
                data: { id: id, check: check },
                success: function (data) {
                    if (check) {
                        if (modal){
                            DisableEditButton(button);
                        }
                        $(text).addClass('checked-task');
                        if (data.completed) {
                            var span = '';
                            if (modal) {
                                span = '<span class="completed-tag-modal">COMPLETED</span>'
                                $(textTitle).prepend(span)
                                completedChecklist = true
                            }
                            else {
                                span = '<span class="completed-tag-card">COMPLETED</span>'
                                $(textTitle).append(span)
                            }
                        }
                    }
                    else {
                        completedChecklist = false;
                        if (modal){
                            EnableEditButton(button);
                        }
                        $(text).removeClass('checked-task');
                            if (modal) {
                                $(textTitle).children().remove('.completed-tag-modal')
                            }
                            else {
                                $(textTitle).children().remove('.completed-tag-card')
                            }
                    }
                    reloadChecklists = true;
                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 1s' });
                    $('#errorMsg').html('<b><small>There was an error marking your Task, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function Completed(id, textTitle, modal){
            $.ajax({
                type: "GET",
                url: "@Url.Action("CompletedChecklist", "Checklists")",
                data: { id: id },
                success: function (data) {
                    if (data.completed) {
                            var span = '';
                            if (modal) {
                                span = '<span class="completed-tag-modal">COMPLETED</span>'
                                $(textTitle).prepend(span)
                            }
                            else {
                                span = '<span class="completed-tag-card">COMPLETED</span>'
                                $(textTitle).append(span)
                            }
                        }
                    },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    $('#errorMsg').html('<b><small>There was an retrieving data, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function DeleteTasks(id, list) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteTask", "Checklists")",
                data: { taskId: id },
                success: function (data) {
                    // Remove list element
                    $(list).remove()

                    // Enable Add Task and Edit buttons
                    $('#AddTask').addClass('add-task-button')
                    $('#AddTask').removeClass('add-task-button-inactive')
                    EnableEditButton($('.edit-task-inactive'))

                },
                error: function () {
                    $("#errorModal").css({ 'transition': 'opacity 3s' });
                    $('#errorMsg').html('<b><small>There was an error deleting your Task, please try again</small></b>');
                    $('#errorModal').modal('show');
                }
            });
        }

        function DisableEditButton(tasks) {
            for (var i = 0; i < tasks.length; i++) {
                $(tasks[i]).removeClass('edit-task')
                $(tasks[i]).addClass('edit-task-inactive')
            }
        }

        function EnableEditButton(tasks) {
            for (var i = 0; i < tasks.length; i++) {
                $(tasks[i]).addClass('edit-task')
                $(tasks[i]).removeClass('edit-task-inactive')
            }
        }

        function TruncateTask(task) {
            var taskText = task.html()
            if (taskText.length > 31) {
                var truncTask = taskText.substring(0, 29) + '...'
                $(task).attr("data-val", taskText);
                $(task).html(truncTask)
            }
        }



        function TruncateTasks(tasks) {
            for (j = 0; j < tasks.length; j++) {
                TruncateTask($(tasks[j]));
                if (j == (tasks.length - 1)) {
                    $(tasks[j]).parent().removeClass('task-border-bottom')
                }
            }
        }
    </script>
<script type="text/javascript" src="~/js/notes-index.bundle.js" asp-append-version="true"></script>
}